
from Crypto.Util.number import *
from Crypto.PublicKey import RSA
from gmpy2 import *
import gmpy2

c1=int(raw_input("Enter the first ciphetext:"))
c2=int(raw_input("Enter the second ciphertext:"))
e1=int(raw_input("Enter the first key:"))
e2=int(raw_input("Enter the second key:"))
n=int(raw_input("Enter the Modulus:"))

g, a, b=gcdext(e1,e2)
if a<0:
    c1=pow(inverse(c1,n),a*-1,n)
else:
    c1=pow(c1,a,n)

if b<0:
    c2=pow(inverse(c2,n),b*-1,n)
else:
    c2=pow(c2,b,n)

ct=(c1*c2)%n
print long_to_bytes(gmpy2.iroot(ct,g)[0])

